{"title":"Create a exporter","content":"<p>This tutorial gives an overview about creating custom exporters for <em>sharpDox</em>. To accomplish this \ntask we will develop a plugin which creates own settings and an exporter to \ncreate a csv output for each method in a solution.</p> \n<p>First of all create a library project in Visual Studio and reference the <code>SharpDox.Model</code> and \n<code>SharpDox.Sdk</code>. In the first step we create the config \nclass. Create a class <code>CSVConfig.cs</code> with the following content:</p> \n<pre><code class=\"language-csharp line-numbers\">using System; \nusing System.ComponentModel; \nusing SharpDox.Sdk.Config; \nusing SharpDox.Sdk.Config.Attributes; \n \nnamespace CSVExporter \n{ \n    // The class implements the interface IConfigSection \n    // Set the group name for the propertygrid. \n    // Otherwise your configuration settings will not be shown! \n    // Use the property name of the string as the second parameter. \n    [Name(typeof(CSVStrings), &quot;CSV&quot;)] \n    public class CSVConfig : IConfigSection \n    { \n        // The ConfigController will register on this event to get notified \n        // about any changes. \n        public event PropertyChangedEventHandler PropertyChanged; \n        protected void OnPropertyChanged(string propertyName) \n        { \n            PropertyChangedEventHandler handler = PropertyChanged; \n            if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName)); \n        } \n \n        // This is our new configitem \n        private string _divider = string.Empty; \n \n        // We define some attribute for the property grid \n        [Required] \n        [Name(typeof(CSVStrings), &quot;Divider&quot;)] \n        public string Divider { get { return _divider; } set { _divider = value; OnPropertyChanged(&quot;Divider&quot;); } } \n \n        // This guid identifies the configsection in  \n        // the config file. \n        public Guid Guid { get { return new Guid(&quot;463e2a9d-5d26-42ac-8a02-012928988c79&quot;); } } \n    } \n}</code></pre> \n<p>In this plugin we only create a setting to define the divider for the csv file. Because of the given attributes \n<em>sharpDox</em> knows how to integrate the settings into the propertygrid.</p> \n<p>Next create the <code>CSVStrings</code> class.</p> \n<pre><code class=\"language-csharp line-numbers\">using SharpDox.Sdk.Local; \n \nnamespace CSVExporter \n{ \n    public class CSVStrings : ILocalStrings \n    { \n        // Strings with a default translation \n        private string _csv = &quot;CSV&quot;; \n        private string _divider = &quot;Divider&quot;; \n \n        // Create a property for the strings. \n        // Do not use auto-properties.  \n        // Otherwise your default translation will not work! \n \n        public string CSV \n        { \n            get { return _csv; } \n            set { _csv = value; } \n        } \n \n        public string Divider \n        { \n            get { return _divider; } \n            set { _divider = value; } \n        } \n \n        // Set the name of the language file \n        public string DisplayName { get { return &quot;CSV&quot;; } } \n    } \n}</code></pre> \n<p>The last step is to create the csv exporter. Create a new class <code>CSVExport.cs</code> with the following content:</p> \n<pre><code class=\"language-csharp line-numbers\">using SharpDox.Model; \nusing SharpDox.Model.Repository; \nusing SharpDox.Sdk.Exporter; \nusing System; \nusing System.IO; \nusing System.Linq; \n \nnamespace CSVExporter \n{ \n    public class CSVExport : IExporter \n    { \n        /// &lt;summary&gt; \n        /// sharpDox listens on this event to get any warnings. \n        /// All messages will be shown in the build window. \n        /// &lt;/summary&gt; \n        public event Action&lt;string&gt; OnRequirementsWarning; \n \n        /// &lt;summary&gt; \n        /// sharpDox listens on this event to get any status \n        /// messages. All messages will be shown in the progressbar. \n        /// &lt;/summary&gt; \n        public event Action&lt;string&gt; OnStepMessage; \n         \n        /// &lt;summary&gt; \n        /// sharpDox listens on this event to get any status update. \n        /// This event will move forward the secondary progressbar. \n        /// &lt;/summary&gt; \n        public event Action&lt;int&gt; OnStepProgress; \n \n        private readonly CSVConfig _csvConfig; \n \n        public CSVExport(CSVConfig csvConfig) \n        { \n            // Get our new configuration \n            _csvConfig = csvConfig; \n        } \n \n        // This function just returns true. No requirements to check for. \n        public bool CheckRequirements() \n        { \n            return true; \n        } \n \n        // The export function gets the parsed solution and the output path. \n        public void Export(SDProject sdProject, string outputPath) \n        { \n            var csv = string.Empty; \n            var types = sdProject.Repositories.Values.Single().GetAllTypes().OfType&lt;SDType&gt;().Where(o =&gt; !o.IsProjectStranger); \n             \n            foreach (var type in types) \n            { \n                ExecuteOnStepMessage(&quot;Creating entry for &quot; + type.Fullname); \n                csv += string.Format(&quot;{1}{0}{2}{0}{3}&quot;, _csvConfig.Divider, type.Fullname, type.Name, type.Namespace) + System.Environment.NewLine; \n            } \n \n            File.WriteAllText(Path.Combine(outputPath, &quot;methods.csv&quot;), csv); \n        } \n \n        private void ExecuteOnStepMessage(string message) \n        { \n            var handler = OnStepMessage; \n            if (handler != null) \n            { \n                handler(message); \n            } \n        } \n \n        private void ExecuteOnStepProgress(int progress) \n        { \n            var handler = OnStepProgress; \n            if (handler != null) \n            { \n                handler(progress); \n            } \n        } \n \n        // The name of the exporter will be used to  \n        // create a subdirectory in the output path. \n        public string ExporterName { get { return &quot;CSV&quot;; } } \n    } \n}</code></pre> \n<p>This is the complete, simple plugin for <em>sharpDox</em>. Just copy the created dll file into the \n<em>plugin</em> folder of <em>sharpDox</em>. This way <em>sharpDox</em> knows about the plugin and will register \nit at the start. Please download the example on this site <a href=\"https://github.com/Geaz/SharpDox.Examples.Plugins.CVS\" title=\"CSV-Exporter\">here</a>.</p>"}