{".NET Framework 4.6":{"name":"SharpDox.Sdk.Config","assembly":"SharpDox.Sdk","description":"<p>The config namespace provides the interface to implement custom config \nsections in the <strong>sharpDox</strong> config file.</p> \n<p>Following an example how to implement a config section with a single config item:</p> \n<pre><code class=\"language-csharp line-numbers\">using System; \nusing System.ComponentModel; \nusing SharpDox.Sdk.Config; \nusing SharpDox.Sdk.Config.Attributes; \n \nnamespace ExamplePlugin \n{ \n    [Name(typeof(ExampleStrings), &quot;ExampleConfig&quot;)] \n    public class ExampleConfig : IConfigSection \n    { \n        public event PropertyChangedEventHandler PropertyChanged; \n        protected void OnPropertyChanged(string propertyName) \n        { \n            var handler = PropertyChanged; \n            if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName)); \n        } \n \n        private string _exampleItem; \n \n        [Required] \n        [Name(typeof(ExampleStrings), &quot;ExampleItem&quot;)] \n        public string ExampleItem \n        { \n            get { return _exampleItem; } \n            set \n            { \n                _exampleItem = value; \n                OnPropertyChanged(&quot;ExampleItem&quot;); \n            } \n        } \n \n        public Guid Guid { get { return new Guid(&quot;XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXXXX&quot;); } }          \n    } \n}</code></pre> \n<p>To get access to a config section feed the constructor of your plugin with it. <strong>sharpDox</strong> takes care that the plugin will get the instance of the current config section. Following an example how to get a config section:</p> \n<pre><code class=\"language-csharp line-numbers\">using SharpDox.Model; \nusing SharpDox.Model.Repository; \nusing SharpDox.Sdk.Exporter; \nusing System; \n \nnamespace ExampleExporter \n{ \n    public class ExampleExporter : IExporter \n    { \n        public event Action&lt;string&gt; OnRequirementsWarning; \n        public event Action&lt;string&gt; OnStepMessage; \n        public event Action&lt;int&gt; OnStepProgress; \n \n        private readonly ExampleConfig _exampleConfig; \n \n        //Fill the constructor with the config section \n        public ExampleExporter(ExampleConfig exampleConfig) \n        { \n            _exampleConfig = exampleConfig; \n        } \n \n        public bool CheckRequirements() \n        { \n            // Check for requirements \n        } \n \n        public void Export(SDProject sdProject, string outputPath) \n        { \n            //Exportcode \n        } \n \n        public string ExporterName { get { return &quot;example&quot;; } } \n    } \n}</code></pre>","types":[{"id":"SharpDox.Sdk.Config.IConfigController","kind":"interface","accessibility":"public","name":"IConfigController","summary":"<p>This interface exposes all needed functionalities to \nwork with config files.</p>"},{"id":"SharpDox.Sdk.Config.IConfigSection","kind":"interface","accessibility":"public","name":"IConfigSection","summary":"<p>Every plugin which needs new configuration items can implement this interface.</p>"},{"id":"SharpDox.Sdk.Config.ICoreConfigSection","kind":"interface","accessibility":"public","name":"ICoreConfigSection","summary":"<p>All core configuration items of sharpDox.</p>"}]}}