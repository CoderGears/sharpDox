{".NET Framework 4.0":{"name":"SharpDox.Sdk.Local","assembly":"SharpDox.Sdk","description":"<p>The local namespace provides the interface to implement custom strings for <strong>sharpDox</strong>. <em>SharpDoxStrings</em> contains all strings of the core application. \nThe default language of <strong>sharpDox</strong> is english.</p> \n<p>On the start process <strong>sharpDox</strong> creates a language file in the folder <em>lang/defaults</em> for each registered local strings type. \nFor example the <em>en.SharpDox.sdlang</em>. This file contains all strings of the core application. If the tool should be available in Spanish, create a copy of <em>en.SharpDox.sdlang</em> into the <em>lang</em> folder and rename it to <em>es.SharpDox.sdlang</em>. The file always starts with the two letter language code. Now translate all the strings to spanish.</p> \n<p>If the windows system language is set to spanish, <strong>sharpDox</strong> will take all <em>es.*</em> language files to show the translations. If no translation for a string is available, <strong>sharpDox</strong> takes the default string.</p> \n<p>Following an example how to implement a custom strings type with a single string:</p> \n<pre><code class=\"language-csharp line-numbers\">using SharpDox.Sdk.Local; \n \nnamespace ExampleExporter \n{ \n    public class ExampleStrings : ILocalStrings \n    { \n        private string _exampleString = &quot;English String&quot;; \n \n        public string ExampleString \n        { \n            get { return _exampleString; } \n            set { _exampleString = value; } \n        } \n \n        public string DisplayName { get { return &quot;ExampleExporter&quot;; } } \n    } \n}</code></pre> \n<p>The usage of a custom strings type is like using a custom config section. Please see the <a href=\"#!namespace/SharpDox.Sdk.Config\">SharpDox.Sdk.Config</a> description.</p>","types":[{"id":"SharpDox.Sdk.Local.ILocalController","accessibility":"public","name":"ILocalController","summary":""},{"id":"SharpDox.Sdk.Local.ILocalStrings","accessibility":"public","name":"ILocalStrings","summary":"<p>Every plugin which wants to use localized \nstrings has to implement this interface.</p>"}]}}